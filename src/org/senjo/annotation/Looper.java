package org.senjo.annotation;

import static java.lang.annotation.ElementType.*;
import java.lang.annotation.*;

/** Сложный метод зацикливающий блокировку. Снаружи он как наивный, требует обязательное
 * наличие блокировки и возвращает управление в блокировке. Но внутри себя может временно
 * снимать эту внешнюю блокировку и вызывать сторонние методы, которые должны быть вызваны
 * без блокировки и даже сами могут включать эту же блокировку. Таким образом возможно
 * зацикленные рекурсивные вызовы разных или одних и тех же методов.
 * <p/>Не лучшее решение писать код таким образом, однако изредка этот подход
 * может оказаться более эффективным и простым решением. */
//XXX Название временное, пока не очень удачное...
@Target({TYPE, METHOD}) @Retention(RetentionPolicy.CLASS)
public @interface Looper { }
